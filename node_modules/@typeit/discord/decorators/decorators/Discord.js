"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob = require("glob");
const __1 = require("../..");
function importCommand(classType, target) {
    __1.DIService.instance.addService(classType);
    const ons = __1.MetadataStorage.instance.events.filter((on) => {
        return on.classRef === classType;
    });
    ons.map((event) => {
        event.hidden = true;
        if (event instanceof __1.DCommand) {
            const newCommand = (__1.DCommand
                .createCommand(event.commandName)
                .decorate(target, event.key, event.method, classType));
            __1.MetadataStorage.instance.addCommand(newCommand);
        }
        else if (event instanceof __1.DCommandNotFound) {
            const newCommand = (__1.DCommandNotFound
                .createCommandNotFound()
                .decorate(target, event.key, event.method, classType));
            __1.MetadataStorage.instance.addCommandNotFound(newCommand);
        }
        else {
            const newCommand = (__1.DOn
                .createOn(event.event, event.once)
                .decorate(target, event.key, event.method, classType));
            __1.MetadataStorage.instance.addOn(newCommand);
        }
    });
}
function Discord(prefix, params) {
    const finalParams = params || {};
    return (target) => {
        if (finalParams === null || finalParams === void 0 ? void 0 : finalParams.import) {
            let importCommands = (finalParams === null || finalParams === void 0 ? void 0 : finalParams.import) || [];
            if (!Array.isArray(importCommands)) {
                importCommands = [importCommands];
            }
            importCommands.map((cmd) => {
                if (typeof cmd === "string") {
                    const files = Glob.sync(cmd);
                    files.map((file) => {
                        let classType;
                        const classImport = require(file);
                        if (classImport.default) {
                            classType = classImport.default;
                        }
                        else {
                            const key = Object.keys(classImport)[0];
                            classType = classImport[key];
                        }
                        importCommand(classType, target);
                    });
                }
                else {
                    importCommand(cmd.execute, target);
                }
            });
        }
        const instance = (__1.DDiscord
            .createDiscord(prefix)
            .decorate(target, target.constructor.name, target));
        __1.MetadataStorage.instance.addDiscord(instance);
    };
}
exports.Discord = Discord;
//# sourceMappingURL=Discord.js.map