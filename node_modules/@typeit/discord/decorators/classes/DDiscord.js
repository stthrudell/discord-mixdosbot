"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Decorator_1 = require("./Decorator");
const __1 = require("../..");
class DDiscord extends Decorator_1.Decorator {
    constructor() {
        super(...arguments);
        this._originalRules = {};
        this._infos = {};
    }
    get originalRules() {
        return this._originalRules;
    }
    get description() {
        return this._infos.description;
    }
    get prefix() {
        return this._prefix;
    }
    get infos() {
        return this._infos;
    }
    set infos(value) {
        this._infos = value;
    }
    get argsRules() {
        return this._argsRules;
    }
    set argsRules(value) {
        this._argsRules = value;
    }
    get instance() {
        return this._instance;
    }
    get commandNotFound() {
        return this._commandNotFound;
    }
    set commandNotFound(value) {
        this._commandNotFound = value;
    }
    get discordInfos() {
        return {
            description: this.description,
            infos: this.infos,
            argsRules: this.argsRules,
            prefix: this.prefix
        };
    }
    static createDiscord(prefix) {
        const discord = new DDiscord();
        let finalPrefix = prefix;
        if (__1.RuleBuilder.typeOfExpression(prefix) === String) {
            finalPrefix = __1.RuleBuilder.escape(prefix);
        }
        const escapedPrefix = finalPrefix;
        if (typeof escapedPrefix !== "function") {
            const isRuleBuilder = escapedPrefix instanceof __1.RuleBuilder;
            finalPrefix = isRuleBuilder ? () => escapedPrefix : () => __1.Rule().startWith(escapedPrefix);
        }
        discord._argsRules = [
            async (command) => [await finalPrefix(command)]
        ];
        discord._prefix = escapedPrefix;
        return discord;
    }
}
exports.DDiscord = DDiscord;
//# sourceMappingURL=DDiscord.js.map