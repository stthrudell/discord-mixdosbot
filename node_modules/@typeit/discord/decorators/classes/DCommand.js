"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../..");
const DOn_1 = require("./DOn");
class DCommand extends DOn_1.DOn {
    constructor() {
        super(...arguments);
        this._originalRules = {};
        this._infos = {};
    }
    get originalRules() {
        return this._originalRules;
    }
    get infos() {
        return this._infos;
    }
    set infos(value) {
        this._infos = value;
    }
    get description() {
        return this._infos.description;
    }
    get argsRules() {
        return this._argsRules;
    }
    set argsRules(value) {
        this._argsRules = value;
    }
    get commandName() {
        return this._commandName;
    }
    get commandInfos() {
        return {
            description: this.description,
            infos: this.infos,
            argsRules: this.argsRules,
            prefix: this.linkedDiscord.prefix,
            commandName: this.commandName
        };
    }
    static createCommand(commandName) {
        const command = new DCommand();
        if (commandName) {
            let finalCommandName = commandName;
            if (__1.RuleBuilder.typeOfExpression(finalCommandName) === String) {
                finalCommandName = __1.RuleBuilder.escape(finalCommandName);
            }
            const escapedCommandName = finalCommandName;
            if (typeof escapedCommandName !== "function") {
                const expr = escapedCommandName;
                const isRuleBuilder = expr instanceof __1.RuleBuilder;
                if (expr) {
                    finalCommandName = isRuleBuilder ? () => expr : () => __1.Rule(expr).spaceOrEnd();
                }
            }
            command._argsRules = [
                async (command) => [await finalCommandName(command)]
            ];
            command._commandName = escapedCommandName;
        }
        else {
            command._argsRules = [];
        }
        command._event = "message";
        command._once = false;
        return command;
    }
    update() {
        if (!this._commandName) {
            this._commandName = this._key;
        }
    }
}
exports.DCommand = DCommand;
//# sourceMappingURL=DCommand.js.map