/// <reference types="discord.js" />
import { CommandMessage } from "../../types/public/CommandMessage";
import { DOn, DDiscord, DGuard, Client, DCommand, DCommandNotFound, DiscordEvents, Modifier } from "../..";
export declare class MetadataStorage {
    private static _instance;
    private _events;
    private _commands;
    private _commandNotFounds;
    private _guards;
    private _discords;
    private _modifiers;
    static get instance(): MetadataStorage;
    static clear(): void;
    get events(): readonly DOn[];
    get discords(): readonly DDiscord[];
    get commands(): readonly DCommand[];
    get commandsNotFound(): readonly DCommandNotFound[];
    addModifier(modifier: Modifier<any>): void;
    addOn(on: DOn): void;
    addCommand(on: DCommand): void;
    addCommandNotFound(on: DCommandNotFound): void;
    addGuard(guard: DGuard): void;
    addDiscord(discord: DDiscord): void;
    build(): Promise<void>;
    removeEvent(event: DOn): DOn;
    trigger<Event extends DiscordEvents>(event: Event, client: Client, once?: boolean): (...params: (import("discord.js").ClientEvents & {
        commandMessage: [CommandMessage<any, any>];
    })[Event]) => Promise<any[]>;
}
